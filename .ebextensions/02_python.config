option_settings:
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: static

files:
  "/etc/nginx/conf.d/01_cors.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # CORS configuration for API endpoints
      location /api/ {
          # Handle preflight requests
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' 'https://console-encryptgate.net' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
              add_header 'Access-Control-Allow-Credentials' 'true' always;
              add_header 'Access-Control-Max-Age' 86400 always;
              add_header 'Content-Type' 'text/plain charset=UTF-8' always;
              add_header 'Content-Length' 0 always;
              return 204;
          }

          # Proxy to Flask app
          proxy_pass http://127.0.0.1:8000;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          
          # Let Flask handle CORS for actual requests
          proxy_hide_header 'Access-Control-Allow-Origin';
          proxy_hide_header 'Access-Control-Allow-Methods';
          proxy_hide_header 'Access-Control-Allow-Headers';
          proxy_hide_header 'Access-Control-Allow-Credentials';
      }

container_commands:
  01_reload_nginx:
    command: "sudo service nginx reload || true"
  02_test_nginx:
    command: "sudo nginx -t || true"