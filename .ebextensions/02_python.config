# .ebextensions/python.config

# ==============================================================================
# 1) Standard EB Python platform settings
# ==============================================================================
option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: wsgi:application
    NumProcesses: 1
    NumThreads: 15

  aws:elasticbeanstalk:application:environment:
    PYTHONPATH: "/var/app/current:$PYTHONPATH"
    PORT: "8080"
    FLASK_APP: "main.py"


# ==============================================================================
# 2) Yum packages for building any C‐extensions (cryptography, etc.)
# ==============================================================================
packages:
  yum:
    python3-devel: []      # Needed for packages with native code
    gcc: []                # Compiler for any C dependencies
    openssl-devel: []      # If you use "cryptography" or similar
    libffi-devel: []       # For any libraries that require libffi


# ==============================================================================
# 3) “commands” run _before_ container_commands.
#    We will:
#      a) wait for EB to have created /var/app/venv/staging-LQM1lest
#      b) upgrade pip inside that venv
#      c) install requirements.txt using that venv’s pip
# ==============================================================================
commands:
  # 3a) Wait until EB’s virtualenv directory exists.
  01_wait_for_venv:
    command: |
      until [ -d /var/app/venv/staging-LQM1lest ]; do
        sleep 1
      done

  # 3b) Upgrade pip/setuptools/wheel inside the EB‐created venv.
  02_upgrade_pip:
    command: |
      /var/app/venv/staging-LQM1lest/bin/python3.13 -m pip install --upgrade pip setuptools wheel
    cwd: "/var/app/current"
    ignoreErrors: false

  # 3c) Install your Python libraries (requirements.txt) using venv’s pip.
  03_install_requirements:
    command: |
      /var/app/venv/staging-LQM1lest/bin/pip3 install -r /var/app/current/requirements.txt
    cwd: "/var/app/current"
    ignoreErrors: false


# ==============================================================================
# 4) “container_commands” run _after_ “commands” (and after the application has been staged).
#    We keep your existing log‐dir + PID cleanup here. Numeric prefixes bumped accordingly.
# ==============================================================================
container_commands:
  # 4a) Create (and chown/chmod) a log directory for EncryptGate.
  04_create_log_directory:
    command: |
      mkdir -p /var/log/encryptgate
      chmod -R 755 /var/log/encryptgate
      chown -R wsgi:wsgi /var/log/encryptgate || true
      chown -R webapp:webapp /var/log/encryptgate || true

  # 4b) Kill any leftover Gunicorn or processes on port 8080 before deploy.
  05_cleanup_old_processes:
    command: |
      pkill -9 -f gunicorn || true
      fuser -k 8080/tcp   || true

  # 4c) Ensure the PID directory exists.
  06_create_pid_directory:
    command: |
      mkdir -p /var/pids
      chmod 755 /var/pids
